Prof. Kaiser
Continuous Integration and Coverage - Brief Reflection on Coverage
SYNC(Ruicong Xie-rx2119, Tianci Zhong-tz2278, Yue Cen-yc3171, Jiaxin Su-js4722)
December 10th


Brief Reflection on Coverage


Our continuous integration tool is Travis CI, and our statement coverage tool is Coverall.io. 
The current coverage of our test is 80%. As we discussed Section I. Discussion, the two main reasons caused the 20% uncovered codes are: 1. difficult -to-test codes; 2. Limited time. 


First, some of the codes in our application are difficult to test, which means the procedure to test those lines of codes will be very complicated. For example, one of our functions is like:


module.exports = function RedirectRouter(io) {
   var router = express.Router();
   router.get('*', function(req, res) {
       var shortUrl = req.originalUrl.slice(1);
       urlService.getLongUrl(shortUrl, function(url) {
           Eif (url) {
               res.redirect(url.longUrl);
               statsService.logRequest(shortUrl, req);
               io.emit('shortUrlVisited', shortUrl);
           } else {
                res.sendFile('404.html', {
                   root: path.join(__dirname, '../public/views')
               });
           }
       });
   });
   this.router = router;
};


We covered the lines without any highlight. The one line with red highlight are the uncovered part. In this case, what we need to do is that first request the API path “*”, which means it can be any url, force error on the request, get the response, check if res(ponse) has the file called ‘404. html’. Checking if res has the file is difficult, so this makes checking the content of the file even harder. In our application codes, we have many lines similar to this case. Since many of these difficult-to-test codes scatters in the codes, this decreases our test coverage.  


Furthermore, there is another situation that we cannot really force error to our codes or the methods are private so that we cannot test them. Here are two examples:


Example 1 - We cannot really force error on the function below since the red-highlighted part will only be triggered when there is something severe happened to the application.


var getComments = function(postId, callback) {
   var json = {'status': 'ok', 'data': {}};

   commentModel.find({postId: postId, isDeleted: {$ne: true}}).sort({_id: 1}).
       exec(function(err, comments) {
           Iif (err) {
                json['status'] = 'failed';
                json['data'] = err;
                callback(json);
                return;
           }

           json['data'] = comments;
           callback(json);
       });
};


Example 2 - The function below is private, which means that it is not publicly available and we cannot test it. 


var generateShortUrl = function(callback) {
    UrlModel.count({}, function(err, num) {
        callback(convertTo62(num + 1));
   });
};


So far, the files in our application codes that are not 100% covered are:
* route folder
   * auth.js - 88.24%
   * feed.js - 91.01%
   * rank.js - 92.31%
   * redirect.js - 93.57%
   * rest.js - 77.78%        
* services folder
   * authService.js - 60.66%
   * rankUrlService.js - 87.72%
   * statsService.js - 85%
   * urlService.js - 52.54%
   * userUrlService.js - 75.8%        


You can get even more details (like which codes are not covered) about our coverage in Section II.Coverage Report. 


Second, we put efforts into making our application more user-friendly and easy-to-use for our users, but then we do not have enough time to actually cover every statement in our codes yet.


In addition to the two main reasons above, we did not find any other reason so far. We are still working on adding additional unit test to increase the coverage up to 85~90% before the showcase demo and the final demo.